{"version":3,"sources":["images/logo-lotr.png","templates/Header.js","templates/Newsletter.js","components/Quotes.js","services/getData.js","components/Card.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","src","logo","alt","Newsletter","useState","value","setValue","onSubmit","e","preventDefault","alert","for","type","name","id","onChange","target","placeholder","Quotes","dialog","movie","character","apiKey","Authorization","Card","setDialog","setCharacter","setMovie","setIsLoading","random","setRandom","useEffect","fetch","headers","then","res","json","response","charId","url","getCharacter","docs","movieId","getMovie","onClick","randomQuote","Math","floor","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,uC,iSCI9BC,G,MAAS,WACpB,OACE,yBAAKC,UAAU,UACb,uBAAGC,KAAK,MACN,yBAAKC,IAAKC,IAAMC,IAAI,S,OCNfC,G,MAAa,WAAO,IAAD,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,KAW9B,OACE,oCACE,yBAAKR,UAAU,cACb,0BAAMS,SAXS,SAAAC,GACnBA,EAAEC,iBACFC,MAAM,sBAUA,6BACE,2BAAOZ,UAAU,WAAWa,IAAI,SAAhC,+BAGA,2BACEb,UAAU,UACVc,KAAK,OACLC,KAAK,QACLC,GAAG,GACHT,MAAOA,EACPU,SAjBS,SAAAP,GACnBF,EAASE,EAAEQ,OAAOX,QAiBRY,YAAY,+BAEd,4BAAQnB,UAAU,kDAAlB,iBAKJ,uBAAGA,UAAU,YAAb,uC,QCjCKoB,EAAS,SAAC,GAAD,QACpBC,cADoB,MACX,SADW,MAEpBC,aAFoB,MAEZ,QAFY,MAGpBC,iBAHoB,MAGR,QAHQ,SAKpB,oCACE,4BAAKF,GACL,4BAAKE,GACL,4BAAKD,KCTHE,EAAS,CAAEC,cAAe,+B,gBCMnBC,EAAO,WAAO,IAAD,EACIpB,mBAC1B,+GAFsB,mBACjBe,EADiB,KACTM,EADS,OAIUrB,mBAAS,8BAJnB,mBAIjBiB,EAJiB,KAINK,EAJM,OAKEtB,mBAAS,wBALX,mBAKjBgB,EALiB,KAKVO,EALU,OAMUvB,oBAAS,GANnB,mBAMNwB,GANM,aAQIxB,mBAAS,GARb,mBAQjByB,EARiB,KAQTC,EARS,KA6BxB,OAbAC,qBAAU,WDLHC,MAFK,6CAEM,CAAEC,QAASX,IAAUY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UCM1CF,MAAK,SAAAG,IDAb,SAAsBC,GAC3B,IAAMC,EAAG,yDAAqDD,GAE9D,OAAON,MAAMO,EAAK,CAAEN,QAASX,IAAUY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WCFnDI,CAAaH,EAASI,KAAKZ,GAAQR,WAAWa,MAAK,SAAAC,GACjDT,EAAaS,EAAItB,SDIlB,SAAkB6B,GACvB,IAAMH,EAAG,qDAAiDG,GAE1D,OAAOV,MAAMO,EAAK,CAAEN,QAASX,IAAUY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UCLnDO,CAASN,EAASI,KAAKZ,GAAQT,OAAOc,MAAK,SAAAC,GACzCR,EAASQ,EAAItB,SAEfY,EAAUY,EAASI,KAAKZ,GAAQV,QAChCS,GAAa,QAEd,CAACC,IAGF,oCACE,yBAAK/B,UAAU,QACb,4BACEC,KAAK,IACLD,UAAU,0CACVe,KAAK,SACL+B,QA1BY,SAAApC,GAClBA,EAAEC,iBACF,IAAIoC,EAAcC,KAAKC,MAAsB,KAAhBD,KAAKjB,UAClCC,EAAUe,KAmBN,oBAQA,kBAAC,EAAD,CAAQ1B,OAAQA,EAAQE,UAAWA,EAAWD,MAAOA,OCnC9C4B,G,MARF,WACX,OACE,oCACE,kBAAC,EAAD,S,MCcSC,MAdf,WACE,OACE,oCACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,SCHYoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a4577ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-lotr.8b615882.png\";","import React from 'react';\nimport logo from '../images/logo-lotr.png';\nimport './Header.css';\n\nexport const Header = () => {\n  return (\n    <div className='header'>\n      <a href='/#'>\n        <img src={logo} alt='' />\n      </a>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './Newsletter.css';\nexport const Newsletter = () => {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    alert('boooom Chacalaca');\n  };\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  return (\n    <>\n      <div className='newsletter'>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label className='epicfont' for='email'>\n              Lord of the Ring Newsletter\n            </label>\n            <input\n              className='inline '\n              type='text'\n              name='email'\n              id=''\n              value={value}\n              onChange={handleChange}\n              placeholder='One email to rule them all'\n            />\n            <button className='action-button shadow animate color news-button'>\n              Subscribe!!\n            </button>\n          </div>\n        </form>\n        <p className='epicfont'>Receive an EPIC QUOTE every day</p>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const Quotes = ({\n  dialog = 'dialog',\n  movie = 'movie',\n  character = 'hello'\n}) => (\n  <>\n    <h2>{dialog}</h2>\n    <h3>{character}</h3>\n    <h4>{movie}</h4>\n  </>\n);\n","//Services call to API\nconst apiKey = { Authorization: 'Bearer Ns6Ev8bwjJGetNumoQbR' };\n\n// const fromApiResponse = apiResponse => {\n//   const { data = [] } = apiResponse;\n//   if (Array.isArray(data)) {\n//     const quote = data.map(res => {\n//       const { dialog, movie, character } = res;\n//       return { dialog, movie, character };\n//     });\n//     return quote;\n//   }\n//   return [];\n// };\n\nexport function getQuote() {\n  const url = 'https://the-one-api.herokuapp.com/v1/quote';\n\n  return fetch(url, { headers: apiKey }).then(res => res.json());\n  //.then(r => console.log(r));\n\n  //.then(fromApiResponse);\n}\n\nexport function getCharacter(charId) {\n  const url = `https://the-one-api.herokuapp.com/v1/character/${charId}`;\n\n  return fetch(url, { headers: apiKey }).then(res => res.json());\n}\n\nexport function getMovie(movieId) {\n  const url = `https://the-one-api.herokuapp.com/v1/movie/${movieId}`;\n\n  return fetch(url, { headers: apiKey }).then(res => res.json());\n}\n","import React, { useState, useEffect } from 'react';\n//import { useQuote } from '../hooks/useQuote';\nimport { Quotes } from './Quotes';\nimport { getQuote, getCharacter, getMovie } from '../services/getData';\nimport './Card.css';\nimport { docs } from '../DB/quotes.json';\n\nexport const Card = () => {\n  const [dialog, setDialog] = useState(\n    'One Ring to rule them all, One Ring to find them, One Ring to bring them all, and in the darkness bind them'\n  );\n  const [character, setCharacter] = useState('The Fellowship of the Ring');\n  const [movie, setMovie] = useState('The Ring-inscription');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [random, setRandom] = useState(0);\n\n  const handleClick = e => {\n    e.preventDefault();\n    let randomQuote = Math.floor(Math.random() * 2391);\n    setRandom(randomQuote);\n  };\n\n  useEffect(() => {\n    getQuote().then(response => {\n      getCharacter(response.docs[random].character).then(res => {\n        setCharacter(res.name);\n      });\n      getMovie(response.docs[random].movie).then(res => {\n        setMovie(res.name);\n      });\n      setDialog(response.docs[random].dialog);\n      setIsLoading(false);\n    });\n  }, [random]);\n\n  return (\n    <>\n      <div className='card'>\n        <button\n          href='/'\n          className='card action-button shadow animate color'\n          name='button'\n          onClick={handleClick}\n        >\n          Get Random Quote\n        </button>\n        <Quotes dialog={dialog} character={character} movie={movie} />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Card } from '../components/Card';\n\nimport './Home.css';\nconst Home = () => {\n  return (\n    <>\n      <Card />\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Header } from './templates/Header';\nimport { Newsletter } from './templates/Newsletter';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Home from './pages/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <div className='App'>\n        <Header />\n        <Router>\n          <Home />\n        </Router>\n        <Newsletter />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}